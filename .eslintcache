[{"D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\index.js":"1","D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\App.js":"2","D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\components\\Pathfind.js":"3","D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\components\\Node.js":"4","D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\astarAlgorithm\\astar.js":"5","D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\components\\Navbar.js":"6","D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\DFS\\dfs.js":"7","D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\Greedy-Best-first-search\\greedy-best.js":"8","D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\bidirectional swarm\\bidir.js":"9","D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\bfsAlgorithm\\bfs.js":"10"},{"size":449,"mtime":1608113495601,"results":"11","hashOfConfig":"12"},{"size":267,"mtime":1608655929287,"results":"13","hashOfConfig":"12"},{"size":11946,"mtime":1608817338011,"results":"14","hashOfConfig":"12"},{"size":433,"mtime":1608720613114,"results":"15","hashOfConfig":"12"},{"size":2034,"mtime":1608728836017,"results":"16","hashOfConfig":"12"},{"size":3885,"mtime":1608816714909,"results":"17","hashOfConfig":"12"},{"size":1461,"mtime":1608728836001,"results":"18","hashOfConfig":"12"},{"size":2320,"mtime":1608728836014,"results":"19","hashOfConfig":"12"},{"size":3591,"mtime":1608728836022,"results":"20","hashOfConfig":"12"},{"size":982,"mtime":1608816714903,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"5mr9o5",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\index.js",[],["44","45"],"D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\App.js",[],"D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\components\\Pathfind.js",["46"],"import React, { useState, useEffect } from 'react';\r\nimport Astar from '../astarAlgorithm/astar';\r\nimport dfs from \"../DFS/dfs\";\r\nimport greedy_best from '../Greedy-Best-first-search/greedy-best';\r\nimport Bidir from '../bidirectional swarm/bidir';\r\nimport bfs from '../bfsAlgorithm/bfs';\r\nimport Node from './Node';\r\nimport \"bootswatch/dist/lux/bootstrap.min.css\";\r\nimport './Pathfind.css';\r\nimport Navbar from './Navbar';\r\nimport './Node.css';\r\n\r\nconst rows = 15;\r\nconst cols = 60;\r\n\r\nlet NODE_START_ROW = -1;\r\nlet NODE_START_COL = -1;\r\nlet NODE_END_ROW = -1;\r\nlet NODE_END_COL = -1;\r\nlet start = 0;\r\nlet end = 0;\r\nlet wall = 0;\r\nlet button = 0;\r\nlet weighted_wall = 0;\r\nlet Name = \"Select an Algorithm\";\r\n\r\nconst Pathfind = () => {\r\n    const [Grid, setGrid] = useState([]);\r\n    const [Path, setPath] = useState([]);\r\n    const [VisitedNodes, setVisited] = useState([]);\r\n\r\n    useEffect(() => {\r\n        initialiseGrid();\r\n    }, []);\r\n\r\n    // create grid\r\n    const initialiseGrid = () => {\r\n        const grid = new Array(rows);\r\n\r\n        for (let i = 0; i < rows; ++i) {\r\n            grid[i] = new Array(cols);\r\n        }\r\n\r\n        createSpot(grid);\r\n        setGrid(grid);\r\n        addNeighbours(grid);\r\n        setPath([]);\r\n        setVisited([]);\r\n    };\r\n\r\n    const clearNodes = () => {\r\n        // Name = \"Select An Algorithm\";\r\n        // let grid = Grid;\r\n        // for (let i = 0; i < rows; ++i) {\r\n        //     for (let j = 0; j < cols; ++j) {\r\n        //         document.getElementById(`node-${i}-${j}`).className = \"node\";\r\n        //         grid[i][j].isWall = false;\r\n        //     }\r\n        // }\r\n        // start = 0;\r\n        // end = 0;\r\n        // wall = 0;\r\n        // weighted_wall = 0;\r\n        // NODE_START_ROW = -1;\r\n        // NODE_START_COL = -1;\r\n        // NODE_END_ROW = -1;\r\n        // NODE_END_COL = -1;\r\n        // setPath([]);\r\n        // setVisited([]);\r\n        window.location.reload();\r\n    }\r\n\r\n    const changeAlgo = (val) => {\r\n        button = 0;\r\n        if (start === 0) {\r\n            alert(`Select a Start Node!!`);\r\n            return;\r\n        } else if (end === 0) {\r\n            alert(`Select a End Node!!`);\r\n            return;\r\n        } else {\r\n            const startNode = Grid[NODE_START_ROW][NODE_START_COL];\r\n            const endNode = Grid[NODE_END_ROW][NODE_END_COL];\r\n            let path;\r\n            switch (val) {\r\n                case 1:\r\n                    path = Astar(startNode, endNode);\r\n                    Name = 'A* Algorithm';\r\n                    break;\r\n                case 2:\r\n                    path = dfs(startNode, endNode, rows, cols);\r\n                    Name = \"DFS Algorithm\";\r\n                    break;\r\n                case 3:\r\n                    path = greedy_best(startNode, endNode, rows, cols);\r\n                    Name = \"Greedy-best-first-search\";\r\n                    break;\r\n                case 4:\r\n                    path = Bidir(startNode, endNode);\r\n                    Name = \"Bidirectional Swarm\";\r\n                    break;\r\n                case 5:\r\n                    path = bfs(startNode, endNode);\r\n                    Name = \"BFS Algorithm\";\r\n                    break;\r\n                default:\r\n                    Name = \"Choose a Algorithm\";\r\n            }\r\n            setPath(path.path);\r\n            setVisited(path.visited);\r\n        }\r\n    }\r\n\r\n    // create spot\r\n    const createSpot = (grid) => {\r\n        for (let i = 0; i < rows; ++i) {\r\n            for (let j = 0; j < cols; ++j) {\r\n                grid[i][j] = new Spot(i, j);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const onHover = (x, y) => {\r\n        if ((wall === 1 && button === 3)) {\r\n            if (!((x === NODE_START_ROW && y === NODE_START_COL) || (x === NODE_END_ROW && y === NODE_END_COL))) {\r\n                let grid = Grid;\r\n                if (grid[x][y].isWall) {\r\n                    document.getElementById(`node-${x}-${y}`).className = \"node\";\r\n                } else {\r\n                    document.getElementById(`node-${x}-${y}`).className = \"node node-wall\";\r\n                }\r\n                grid[x][y].isWall = !grid[x][y].isWall;\r\n                setGrid(grid);\r\n                wall = 1;\r\n            }\r\n        } else if (weighted_wall === 1 && button === 5) {\r\n            let grid = Grid;\r\n            if (!((x === NODE_START_ROW && y === NODE_START_COL) || (x === NODE_END_ROW && y === NODE_END_COL))) {\r\n                if (grid[x][y].isWall) {\r\n                    grid[x][y].weight = 2;\r\n                    document.getElementById(`node-${x}-${y}`).className = \"node\";\r\n                } else {\r\n                    grid[x][y].weight = 1;\r\n                    document.getElementById(`node-${x}-${y}`).className = \"node node-wall-weighted\";\r\n                }\r\n                grid[x][y].isWall = !grid[x][y].isWall;\r\n                setGrid(grid);\r\n                weighted_wall = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    const changeWall = (x, y) => {\r\n        let grid = Grid;\r\n        if (button === 1 && !(x === NODE_END_ROW && y === NODE_END_COL)) {\r\n            if (start === 1) {\r\n                document.getElementById(`node-${NODE_START_ROW}-${NODE_START_COL}`).className = \"node\";\r\n                grid[NODE_START_ROW][NODE_START_COL].isStart = false;\r\n            }\r\n            document.getElementById(`node-${x}-${y}`).className = \"node node-start\";\r\n            grid[x][y].isStart = true;\r\n            setGrid(grid);\r\n            NODE_START_ROW = x;\r\n            NODE_START_COL = y;\r\n            start = 1;\r\n        } else if (button === 2 && !(x === NODE_START_ROW && y === NODE_START_COL)) {\r\n            if (end === 1) {\r\n                document.getElementById(`node-${NODE_END_ROW}-${NODE_END_COL}`).className = \"node\";\r\n                grid[NODE_END_ROW][NODE_END_COL].isEnd = false;\r\n            }\r\n            document.getElementById(`node-${x}-${y}`).className = \"node node-end\";\r\n            grid[x][y].isEnd = true;\r\n            setGrid(grid);\r\n            NODE_END_ROW = x;\r\n            NODE_END_COL = y;\r\n            end = 1;\r\n        } else if (button === 3) {\r\n            if (!((x === NODE_START_ROW && y === NODE_START_COL) || (x === NODE_END_ROW && y === NODE_END_COL))) {\r\n                if (grid[x][y].isWall) {\r\n                    document.getElementById(`node-${x}-${y}`).className = \"node\";\r\n                } else {\r\n                    document.getElementById(`node-${x}-${y}`).className = \"node node-wall\";\r\n                }\r\n                grid[x][y].isWall = !grid[x][y].isWall;\r\n                setGrid(grid);\r\n                wall = 1;\r\n            }\r\n        } else if (button === 5) {\r\n            if (!((x === NODE_START_ROW && y === NODE_START_COL) || (x === NODE_END_ROW && y === NODE_END_COL))) {\r\n                if (grid[x][y].isWall) {\r\n                    grid[x][y].weight = 2;\r\n                    document.getElementById(`node-${x}-${y}`).className = \"node\";\r\n                } else {\r\n                    grid[x][y].weight = 1;\r\n                    document.getElementById(`node-${x}-${y}`).className = \"node node-wall-weighted\";\r\n                }\r\n                grid[x][y].isWall = !grid[x][y].isWall;\r\n                setGrid(grid);\r\n                weighted_wall = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    // add neighbours \r\n    const addNeighbours = (grid) => {\r\n        for (let i = 0; i < rows; ++i) {\r\n            for (let j = 0; j < cols; ++j) {\r\n                grid[i][j].addneighbours(grid);\r\n            }\r\n        }\r\n    }\r\n\r\n    // spot constructor\r\n    function Spot(i, j) {\r\n        this.x = i;\r\n        this.y = j;\r\n        this.g = 0;\r\n        this.f = 0;\r\n        this.h = 0;\r\n        this.weight = 1;\r\n        this.isStart = false;\r\n        this.isEnd = false;\r\n        this.neighbours = [];\r\n        this.isWall = false;\r\n        this.previous = undefined;\r\n        this.addneighbours = function (grid) {\r\n            let i = this.x;\r\n            let j = this.y;\r\n            if (i > 0) this.neighbours.push(grid[i - 1][j]);\r\n            if (i < rows - 1) this.neighbours.push(grid[i + 1][j]);\r\n            if (j > 0) this.neighbours.push(grid[i][j - 1]);\r\n            if (j < cols - 1) this.neighbours.push(grid[i][j + 1]);\r\n        };\r\n\r\n    }\r\n\r\n    // create grid with node\r\n    const gridwithNode = (\r\n        <div>\r\n            {Grid.map((row, rowIndex) => {\r\n                return (\r\n                    <div key={rowIndex} className=\"rowWrapper\">\r\n                        {row.map((col, colIndex) => {\r\n                            const { isStart, isEnd, isWall } = col;\r\n                            return (\r\n                                <Node key={colIndex} isStart={isStart} isEnd={isEnd} row={rowIndex} col={colIndex} isWall={isWall} changeWall={changeWall} onHover={onHover}></Node>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n\r\n    const visualzeShortestPath = (shortestPath) => {\r\n        if (shortestPath.length === 0) {\r\n            alert(\"No path found between Start and End node!!\");\r\n            return;\r\n        }\r\n        for (let i = 1; i < shortestPath.length - 1; ++i) {\r\n            setTimeout((\r\n                () => {\r\n                    const node = shortestPath[i];\r\n                    document.getElementById(`node-${node.x}-${node.y}`).className = \"node node-shortest-path\";\r\n                }\r\n            ), 20 * i);\r\n        }\r\n    }\r\n\r\n    const visualizePath = () => {\r\n        button = 0;\r\n        if (VisitedNodes.length === 0) {\r\n            alert(`Select an Algorithm`);\r\n        } else {\r\n            for (let i = 0; i <= VisitedNodes.length; ++i) {\r\n                if (i === VisitedNodes.length) {\r\n                    setTimeout((\r\n                        () => {\r\n                            visualzeShortestPath(Path);\r\n                        }\r\n                    ), 10 * i);\r\n                } else {\r\n                    if ((VisitedNodes[i].x === NODE_START_ROW && VisitedNodes[i].y === NODE_START_COL) || (VisitedNodes[i].x === NODE_END_ROW && VisitedNodes[i].y === NODE_END_COL)) {\r\n                        continue;\r\n                    }\r\n                    setTimeout((\r\n                        () => {\r\n                            const node = VisitedNodes[i];\r\n                            document.getElementById(`node-${node.x}-${node.y}`).className = \"node node-visited\";\r\n                        }\r\n                    ), 10 * i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const buttons = (val) => {\r\n        button = val;\r\n        if (button === 4) {\r\n            let grid = Grid;\r\n            for (let i = 0; i < rows; ++i) {\r\n                for (let j = 0; j < cols; ++j) {\r\n                    if ((i !== NODE_START_ROW && j !== NODE_START_COL) && (i !== NODE_END_ROW && j !== NODE_END_COL)) {\r\n                        if (Math.random(1) < 0.2) {\r\n                            grid[i][j].isWall = !grid[i][j].isWall;\r\n                            if (grid[i][j].isWall) {\r\n                                document.getElementById(`node-${i}-${j}`).className = \"node node-wall\";\r\n                            } else {\r\n                                document.getElementById(`node-${i}-${j}`).className = \"node\";\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className>\r\n            <Navbar visualizePath={visualizePath} initialiseGrid={initialiseGrid} visualzeShortestPath={visualzeShortestPath} changeAlgo={changeAlgo} clearNodes={clearNodes} buttons={buttons} />\r\n            <h1 style={{ marginTop: 30 + 'px', marginLeft: 73 + 'px' }}>{Name}</h1>\r\n            <div className=\"Wrapper\">\r\n                {gridwithNode}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Pathfind;\r\n","D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\components\\Node.js",[],"D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\astarAlgorithm\\astar.js",[],"D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\components\\Navbar.js",[],"D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\DFS\\dfs.js",[],"D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\Greedy-Best-first-search\\greedy-best.js",[],"D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\bidirectional swarm\\bidir.js",[],"D:\\Educational\\Web Development\\My Projects\\path-finding-visualizer\\src\\bfsAlgorithm\\bfs.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":34,"column":8,"nodeType":"53","endLine":34,"endColumn":10,"suggestions":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialiseGrid'. Either include it or remove the dependency array.","ArrayExpression",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},"Update the dependencies array to be: [initialiseGrid]",{"range":"60","text":"61"},[934,936],"[initialiseGrid]"]